[
  {
    "path": "posts/tool_use_pydantic/",
    "title": "Structured LLM ouput through Pydantic",
    "description": "Through tool use, generating structured output has become easier. All we need to do is specify the function schema in OpenAPI spec. Yes, this can be streamed too.",
    "author": [
      {
        "name": "Nikhil Kasukurthi",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2024-06-22",
    "categories": [],
    "contents": "\nIntroduction\nHave you tried generating reliable, structured output from LLMs? It’s almost like giving instructions to a dog to fetch a ball.\nIt takes a lot of tries and works occasionally.\nThey do it once, the next time, they get distracted by a squirrel.\nSimilarly, with LLMs you need to tweak your prompt repeatedly to get the make it the right instruction for the model to give the right output.\nMost LLM business use-cases beyond chat need structured output to either show information to the user or to insert it into a data store.\nYou could see a lot of takes on twitter to get this done, my favorite being the No Yapping attached to the end of a prompt.\nOpenAI approached this problem by function_calling API, where you can specify the schema of the output you want. They follow OpenAPI spec (not to be confused with OpenAI the compay) to define the schema.\nOne of the intended purposes of function_calling (now tool_use) is for the model to use a tool to solve a problem based on the input. Like using python interpreter for any math related questions or calling the a weather API to get real-time information.\nDefining the OpenAPI schema is fairly straightforward for cases without complexity.\nThe moment you introduce nested objects and enums, it becomes a bit tricky.\nIn python, through Pydantic, this becomes a lot easier.\nPydantic is a data validation library in Python, similar to @dataclass in python, we create Pydantic BaseModel to define the schema to store data to the object.\nIt has good community support and is widely used in multiple projects.\n\nNo, we will not using a wrapper library.\n\nTo achieve this structured output, there also multiple other wrapper tools like Instructor.\nHowever, in practice these wrappers usually abstract a lot of implementation that could be critical to know.\nSpecially if they modify the prompt (I’m looking at you Langchain).\nNot knowing how may tokens being used before calling the model is recipe for disaster.\nIn the longer run, when the wrapper library has updates and they modify the prompt, it could lead to unexpected output in your application.\nSetting the scene\nLet’s say we are trying to extract MMLU benchmark scores from multiple papers in the arxiv dataset.\nOn ArXiv, the latex submissions are also available.\n\nfrom pydantic import BaseModel\n\nclass WikipediaBio(BaseModel):\n    name: str\n    birth_date: str\n    birth_place: str\n    occupation: str\n    spouse: str\n    children: str\n    parents: str\n    website: str\n\n\n\n\nHere, we have a simple schema for a Wikipedia bio. Along with a long news article, let’s pass this schema to the model to fill it.\nA complicated Pydantic data class\nPartial JSON validation to stream function call outputs\nThe time for generation from an LLM API is significant, expecting a user to wait for a minute before they see any repsonse is not ideal.\nPydantic has released support for validation partial json.\nfrom pydantic_core import from_json\npartial_dog_json = \"\"\"\n    {\n      \"breed\": \"lab\", \n      \"name\": \"fluffy\", \n      \"friends\": [\"buddy\", \"spot\", \"rufus\"], \n      \"age'\"\"\" # this is incomplete json\ndog_dict = from_json(partial_dog_json, allow_partial=True)\nprint(dog_dict)\n\n#> {'breed': 'lab', 'name': 'fluffy', 'friends': ['buddy', 'spot', 'rufus']}\n\n\n",
    "preview": {},
    "last_modified": "2024-06-22T19:14:47+05:30",
    "input_file": "post.knit.md"
  },
  {
    "path": "posts/metrics-search-ranking/",
    "title": "Measuring Ranking",
    "description": "The metrics for ranking through a code-first explanation.",
    "author": [
      {
        "name": "Nikhil Kasukurthi",
        "url": {}
      }
    ],
    "date": "2024-06-15",
    "categories": [],
    "contents": "\n\nIntroduction\nWhen a query is fired on Google, the ordering of these results is a key factor.\nThis is known as ranking.\nSimilarly, in case of uber, showing the relevant ride type (Normal, SUV, Lux) is key for customer conversion.\nAnd in case of e-commerce search engine like that of Amazon, ranking the results on every page is critical, for better conversion.\n\nIn social media networks like Twitter or Instagram, posts needs to be ranked to decide the order in which they are shown.\nIntuitively, as illustrated in /figure the way to evaluate ranking systems would be to rank the item user clicks on first as the most relevant in case of e-commerce or else search engines.\nDrawing parallels, in social media networks, a post that user interacts with, through likes or clicks, could be considered as most relevant and thus ranked higher.\nIn this post, the objective is to understand the methods to evaluate the ranking of results.\nIt’s a secondary step to retrial.\n\n\n\n",
    "preview": {},
    "last_modified": "2024-06-15T14:21:18+05:30",
    "input_file": {}
  },
  {
    "path": "posts/introduction/",
    "title": "Introduction to wawn.io",
    "description": "When and When Not",
    "author": [
      {
        "name": "Nikhil Kasukurthi",
        "url": {}
      }
    ],
    "date": "2021-05-31",
    "categories": [],
    "contents": "\nWhen and When Not\nMore often than not, there are multiple ways to solve a problem. And most developers and data scientists learn on the job, for the job. This means that at times, we might be learning part of a whole, that is pertinent to task at hand.\nAlthough this approach is quick and gets the job done, sometimes you can’t help but wonder, what’s the right way of doing this? or what are the alternative ways of doing this.\nhttps://wawn.io is just the place for that.\nMost experienced developers almost always say the largest learning they had are through their colleagues or friends. https://wawn.io is a place to formalize that knowledge as well. The long term plan on different types of posts is something like this.\nDifferent ways of doing a similar thing.\nLearning the basics, with directions to the resources.\nIn depth surveys of a method, exploring the genesis to the most recent advances of a method.\n\n\n\n",
    "preview": {},
    "last_modified": "2024-06-15T10:48:35+05:30",
    "input_file": {}
  }
]
